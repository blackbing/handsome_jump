// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require) {
    var URL, scanWorker_script, wifiscan;
    scanWorker_script = require('text!./scanWorker.js');
    URL = window.URL || window.webkitURL;
    wifiscan = {
      ips: {},
      portocol: 'http',
      port: 7777,
      callback_fun: {
        getStatusCallback: 'gsc',
        getInfoCallback: 'gic'
      },
      scan: function(privateIP) {
        var ip, scanIPList, _i, _len, _results;
        scanIPList = this.getIPListFromIP(privateIP);
        _results = [];
        for (_i = 0, _len = scanIPList.length; _i < _len; _i++) {
          ip = scanIPList[_i];
          if (ip !== privateIP) {
            _results.push(this.getInfo(ip).done(function(res) {
              return console.log(res);
            }));
          } else {
            _results.push(console.log(privateIP));
          }
        }
        return _results;
      },
      scanWorker: function(privateIP) {
        var scanIPList, worker, workerBlob, workerURL,
          _this = this;
        scanIPList = this.getIPListFromIP(privateIP);
        workerBlob = new Blob([scanWorker_script]);
        workerURL = URL.createObjectURL(workerBlob);
        worker = new Worker(workerURL);
        worker.onmessage = function(e) {
          var data, msgData;
          console.log(e);
          data = e.data;
          msgData = data[data.msgType];
          switch (data.msgType) {
            case 'debug':
              return console.log(msgData);
            case 'ip-found':
              console.log('ip-found', msgData);
              return _this.getInfoCallback(msgData);
          }
        };
        return worker.postMessage({
          msgType: 'data',
          data: scanIPList
        });
      },
      getInfoCallback: function(res) {
        var $avators, avatorUrl, ip, random_idx;
        console.log('getInfoCallback', res);
        avatorUrl = res.url;
        ip = res.ip;
        $avators = $('.connected li').not('.avator');
        random_idx = Math.floor(Math.random() * $avators.length);
        return $avators.eq(random_idx).hide().addClass('avator img-circle').css({
          backgroundImage: "url(" + avatorUrl + ")"
        }).fadeIn();
      },
      getIPListFromIP: function(privateIP) {
        var i, scanIPList, sp_ip, sp_part1, sp_part2, _i;
        sp_ip = privateIP.split('.');
        sp_part1 = sp_ip.splice(0, 3);
        sp_part2 = sp_ip[3];
        scanIPList = [];
        for (i = _i = 1; _i <= 255; i = ++_i) {
          scanIPList.push(sp_part1.join('.') + ("." + i));
        }
        return scanIPList;
      }
    };
    return wifiscan;
  });

}).call(this);
